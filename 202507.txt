pandas 聚合
# 计算各种指标的图层总数
def _occurrence_number_of_times_total(series):
    return int(series.sum())

# df["sum"] = df.groupby(["app", "case"])["val"].transform("sum")
# or df.groupby(["app", "case"]).agg({"val": "sum"})
# app_case_group_layer_total_df = df.groupby(["app", "case"])["val"].agg(_occurrence_number_of_times_total)

行动优雅而美丽的蟒蛇：
1、遵顼PEP8规范
2、使用 itertools.product 替换多层 for循环嵌套
3、python3.8+ 海象运算符  := 
4、联合运算符 合并字典  |   python3.9+

OH性能
redraw: 
    是GPU合成图层的一种方式
    GPU渲染完成后，提交给RSHardware进行合成。合成图层有两种方式：（1）GPU合成；（2）DSS硬件合成
    1、GPU合成，有两种情况：①统一渲染；②redraw
    ①统一渲染在RS主线程(UniRender)做，给的频点/性能会强一点。
    ②redraw在RS子线程(Hardware)做，调度的资源会少一点，而且有个fallback的通路，性能会差一点。
    fallback通路：传给composer_host进程，composer_host判断后fallback给RS，trace上看就是多了一段binder通信。走统一渲染时，硬件子线程只有一次Binder。
    composer_host进程：送显服务进程，实际调的是海思这边的送显接口。
    2、DSS硬件合成（即Hardware Composer，HWC）
    DSS芯片会根据宽高、压缩格式、存储格式等值，来约束图层是否走DSS。
    DSS：显示子系统。
    二、什么情况下会redraw
    图层有问题/硬件规格不支持合成时会发生redraw。走redraw了表示DSS有图层走不了硬件合成，需要走GPU。
    海思判断图层能不能走DSS，如果不能走DSS，告诉RS，RS去调用redraw走GPU合成。
    （这里RS去调用redraw走GPU合成，而不是走统一渲染的GPU合成，因为发生validate的时候统一渲染已经绘制完了）

如何通过精确测温提升cpu、gpu和soc性能？
https://www.ti.com.cn/cn/lit/an/zhcab42/zhcab42.pdf?ts=1752118649137&ref_url=https%253A%252F%252Fwww.bing.com%252F

如何统计丢帧？
https://blog.csdn.net/zhangtian6691844/article/details/143088559
https://cloud.tencent.com/developer/article/1691685

手机场景性能测试中的关键指标分析如下：


异构度量：

定义：评估不同硬件或软件组件之间的性能差异，如处理器、GPU、内存等。
影响：差异可能导致系统瓶颈，影响流畅度。
优化：识别并优化性能低下的组件。
图层数：

定义：界面中显示的图层数量。
影响：图层数过多增加渲染负担，导致性能下降。
优化：减少不必要的图层，优化复杂度。
拦截率帧：

定义：渲染过程中被拦截的帧比例。
影响：高拦截率导致画面卡顿。
优化：解决资源不足或渲染延迟问题。
拦截率图层：

定义：被拦截的图层数量比例。
影响：与图层数和复杂度有关，影响渲染效率。
优化：优化图层渲染，减少拦截。
Redraw图层数：

定义：需要重新绘制的图层数量。
影响：增加CPU/GPU负担，导致性能下降。
优化：减少不必要的重绘，优化内容更新。
拦截原因分布：

定义：拦截原因的分类统计，如内存不足、GPU延迟。
影响：帮助识别主要问题。
优化：针对性优化，如提升内存管理或GPU性能。
DSS帧率分布：

定义：Display Stream Compositor处理帧的速率分布。
影响：低帧率显示合成瓶颈。
优化：优化显示合成过程，提升帧率。
综合分析：

图层数和Redraw图层数增加可能导致帧率下降，引发拦截率上升。
拦截原因分布帮助确定优化方向，如GPU渲染优化。
使用工具测量各指标，全面分析性能表现，针对性优化。
通过理解这些指标及其相互关系，开发者可以全面评估手机性能，采取有效措施提升用户体验

名词解释：
异构度量：指在性能测试中，使用不同的度量标准来评估不同类型的硬件或软件组件。例如，在测试图形性能时，可能会同时考虑CPU、GPU和内存的使用情况，以全面评估应用的性能表现。

图层数：在Android系统中，应用界面是由多个图层组成的。图层数指的是应用在渲染过程中所使用的图层数量。图层数越多，渲染的复杂度越高，可能会导致性能下降。

拦截率帧：在性能测试中，拦截率帧通常指的是在特定条件下，系统未能按时渲染的帧数占总帧数的比例。例如，如果应用在高负载情况下，有10%的帧未能按时渲染，那么拦截率帧就是10%。

拦截率图层：与拦截率帧类似，拦截率图层指的是在特定条件下，未能按时渲染的图层数占总图层数的比例。这可以用来评估应用在复杂界面下的渲染性能。

redraw图层数：在应用界面发生变化时，需要重新绘制的图层数量。频繁的redraw会增加CPU和GPU的负担，影响应用的性能。

拦截原因分布：在性能测试中，拦截原因分布指的是导致帧或图层未能按时渲染的各种原因的分布情况。例如，可能是由于CPU负载过高、内存不足、网络延迟等原因导致的。

dss帧率分布：dss（Dynamic Scene Switching）帧率分布指的是在动态场景切换过程中，帧率的变化情况。这可以用来评估应用在不同场景下的流畅度和稳定性





